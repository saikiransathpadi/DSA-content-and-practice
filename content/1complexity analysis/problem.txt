1.
let n=3  -1
for(let i=0;i<n;i++){  - n
    console.log("hi tatha"); -n
} -1


1+n+n+1= 2+2n = O(n);

---------------------------------
2.
let n=5; -1
for(let i=0;i<n;i=i+2){ -n/2
    for(let j=0;j<n;j++){ -n
        console.log(i+j); -n *n
    }                     -n
}
1+n/2+n+n*n+n+1=n*2+3/2n+1-O(n*2)

---------------------------------
-no of instructions executed
3.
TC??

let n=128;
for(let i=2;i<n;i=i*2){
    console.log("hi rahul");
}

sqrt n,O(n), O(n*2),n*2;  note:log 2base2=1

2,4,8,16,32,...kth i>=n

2,2*2,2*3,2*4...2*k  2*k>=n
log(2*k)=logn
klog2=logn
k=logn
tc=O(logn);

---------------------------------
4.let n=256;
for(let i=2;i<n;i=i*i){
    console.log("hi sai");
}
2,2*2,4*4,16*16,256*256...k*k
2,2sqare, 2pow4, 2pow8, 2pow16
2**(2*0), 2**(2*1), 2**(2*2), 2**(2*3), 2**(2*4), 2**(2*5)...
2**(2**k)>=n
2**k>=logn
k>=log(logn)
O(log(logn));
---------------------------------

let arr=[1,2,3,4,5,6,7,8] - n
//ans=[3,5,7,9,11,13,15]

for(let i=0;i<n-1;i++){ -1
    arr[i]=arr[i]+arr[i+1]
}
console.log(arr);


tc-O(n)
sc-n+1-O(n);
sc-O(1)

-------------------
note:
1.best sorting algorithm- tc-? O(nlogn); 6
2.finding an element in sorted arr- [1,2,3,4,5,6,7,8]  - bc? wc? O(1), O(logn)  binary search
3.finding an element in unsorted arr- [2,1,3,4]  -bc? wc? O(1),O(n)

best case:omega
avg case: theta
worst case:O(n); big o

-------------------------
n/2, n/4, n/8....n/2*k<1

n/2*k<1
n<2*k
logn<k
K>logn
O(logn)
-------------------------